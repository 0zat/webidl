[Exposed=Window,
Exposed=(Window,Worker)]
interface check_stringifier {
  stringifier attribute [TreatNullAs=EmptyString] DOMString ident1;
  stringifier DOMString ident2();
  stringifier DOMString ();
  stringifier;
};

interface check_serializer {
  serializer;
  serializer = test;
  serializer = { inherit, a, b, c };
  serializer = { d, e, f };
  serializer = { getter };
  serializer = [ getter ];
  serializer = [ g, h, i ];
};

interface check_attribute {
  readonly attribute DOMString name1;
  static readonly attribute DOMString name2;
  static attribute DOMString name3;
  inherit attribute DOMString name4;
  attribute Test required;
};

interface check_operation : Parent {
  boolean isMouseOver();
  getter any test();
  object f(optional DOMString c = "value");
  void g(Event a, DOMString? b, optional DOMString c, double... d);
  static void h([PutForwards=name] Event maplike);
  setter float ();
};

partial interface check_others {
  iterable<DOMString>;
  iterable<DOMString, float>;
  readonly maplike<DOMString, float>;
  maplike<DOMString, float>;
  readonly setlike<DOMString>;
  setlike<DOMString>;
};

namespace check_namespace {
  readonly attribute Vector unit;
  double dotProduct(Vector x, Vector y);
  Vector crossProduct(Vector x, Vector y);
};

dictionary check_dictionary {
  DOMString identifier = "value";
  required long req;
};

enum check_enum { "a", "b", "c" };

callback check_callback = void (DOMString a);

callback interface check_ext {
  [Replaceable] const short test1 = 1;
  [Constructor(double x, double y)] const short test2 = 1;
  [NamedConstructor=Image(DOMString src)] unsigned short test3(Node node);
  [PutForwards=name] stringifier;
  [Exposed=(Window,Worker)] getter double ();
};

typedef sequence<Sq> Seq;

Implements_test1 implements Implements_test2 ;

typedef ((a or b)? or c)? union;

[Pref!="my.pref.name"] interface custom_ext {

};